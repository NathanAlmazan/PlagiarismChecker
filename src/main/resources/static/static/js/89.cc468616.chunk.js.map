{"version":3,"file":"static/js/89.cc468616.chunk.js","mappings":"qRA6IA,UAvHA,YAAqG,IAAzEA,EAAwE,EAAxEA,KAAMC,EAAkE,EAAlEA,WAAYC,EAAsD,EAAtDA,YAAaC,EAAyC,EAAzCA,eACzD,GAAgCC,EAAAA,EAAAA,UAAqB,CACnDC,YAAa,GACbC,WAAY,GACZC,cAAe,GACfC,cAAe,GACfC,aAAc,EACdC,aAAc,KANhB,eAAOC,EAAP,KAAiBC,EAAjB,KAQA,GAAoCR,EAAAA,EAAAA,UAAsB,IAAIS,MAA9D,eAAOC,EAAP,KAAmBC,EAAnB,KACQV,EAA0CM,EAA1CN,YAAaC,EAA6BK,EAA7BL,WAAYI,EAAiBC,EAAjBD,cAEjCM,EAAAA,EAAAA,YAAU,WACJf,IACFW,GAAY,SAAAK,GAAK,OAAIhB,KACrBc,EAAc,IAAIF,KAAKZ,EAAWM,cAAgB,IAAMN,EAAWO,mBAGpE,CAACP,IAEJ,IAAMiB,EAAmB,SAACC,GACxBP,GAAY,kBAAKD,GAAN,cAAiBQ,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,UA4B/D,OACE,SAAC,IAAD,CAAQtB,KAAMA,EAAMuB,QAASrB,EAA7B,UACA,kBAAMsB,SAxBa,SAACL,GACpBA,EAAMM,iBACDX,IACLX,EAAe,CACXE,YAAaA,EACbC,WAAYA,EACZC,cAAeO,EAAWY,cAAcC,MAAM,KAAK,GACnDnB,cAAeM,EAAWc,WAAWD,MAAM,KAAK,GAChDlB,aAAc,EACdC,aAAcA,IAGlBE,EAAY,CACRP,YAAa,GACbC,WAAY,GACZC,cAAe,GACfC,cAAe,GACfC,aAAc,EACdC,aAAc,OAMlB,WACE,SAAC,IAAD,UAAcT,EAAa,kBAAoB,uBAC/C,UAAC,IAAD,YACE,SAAC,IAAD,UACGA,EACC,iGACA,mFAGJ,UAAC,IAAD,CAAsB4B,YAAaC,EAAAA,EAAnC,WACI,SAAC,IAAD,CACIC,WAAS,EACTV,KAAK,cACLW,MAAM,mBACNC,WAAS,EACTC,QAAQ,WACRZ,MAAOjB,EACP8B,SAAUjB,EACVkB,UAAQ,EACRC,WAAY,CAAEC,UAAW,IACzBC,GAAI,CAAEC,GAAI,MAEd,UAAC,IAAD,CAAOC,UAAU,MAAMC,QAAS,EAAGF,GAAI,EAAvC,WACI,SAAC,IAAD,CACIR,MAAM,aACNV,MAAOR,EACPqB,SArDO,SAACQ,GAAD,OAA2B5B,EAAc4B,IAsDhDC,YAAa,SAACC,GAAD,OAAY,SAAC,KAAD,QAAWZ,WAAS,GAAKY,QAEtD,SAAC,IAAD,CACId,WAAS,EACTV,KAAK,eACLW,MAAM,SACNE,QAAQ,WACRY,KAAK,SACLxB,MAAOZ,EACPyB,SAAUjB,EACVkB,UAAQ,EACRC,WAAY,CAAEU,IAAK,EAAGC,IAAK,KAC3Bf,WAAS,EACTM,GAAI,CAAEC,GAAI,SAGlB,SAAC,IAAD,CACIS,WAAS,EACTC,KAAM,EACN7B,KAAK,aACLW,MAAM,0BACNc,KAAK,OACLb,WAAS,EACTC,QAAQ,WACRZ,MAAOhB,EACP6B,SAAUjB,EACVkB,UAAQ,EACRC,WAAY,CAAEC,UAAW,KACzBC,GAAI,CAAEC,GAAI,YAIpB,UAAC,IAAD,YACE,SAAC,IAAD,CAAQW,QAASjD,EAAjB,qBACA,SAAC,IAAD,CAAQ4C,KAAK,SAAb","sources":["components/dialogs/CreateAssignment.tsx"],"sourcesContent":["import { useState, useEffect, ChangeEvent, FormEvent } from 'react';\r\nimport Button from \"@mui/material/Button\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { Assignment } from '../../util/base';\r\n\r\n\r\ntype CreateAssignmentProps = {\r\n    open: boolean;\r\n    assignment?: Assignment;\r\n    handleClose: () => void;\r\n    saveAssignment: (assignment: Assignment) => void;\r\n}\r\n\r\nfunction CreateAssignment({ open, assignment, handleClose, saveAssignment }: CreateAssignmentProps) {\r\n  const [formData, setFormData] = useState<Assignment>({\r\n    assignTitle: '',\r\n    assignDesc: '',\r\n    assignDueDate: '', \r\n    assignDueTime: '',\r\n    assignmentId: 0, \r\n    assignPoints: 10\r\n  });\r\n  const [submission, setSubmission] = useState<Date | null>(new Date());\r\n  const { assignTitle, assignDesc, assignPoints } = formData;\r\n\r\n  useEffect(() => {\r\n    if (assignment) {\r\n      setFormData(state => assignment);\r\n      setSubmission(new Date(assignment.assignDueDate + \"T\" + assignment.assignDueTime))\r\n    }\r\n\r\n  }, [assignment])\r\n\r\n  const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setFormData({ ...formData, [event.target.name]: event.target.value });\r\n  }\r\n\r\n  const handleDateChange = (newValue: Date | null) => setSubmission(newValue);\r\n\r\n\r\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    if (!submission) return;\r\n    saveAssignment({\r\n        assignTitle: assignTitle,\r\n        assignDesc: assignDesc,\r\n        assignDueDate: submission.toISOString().split(\"T\")[0], \r\n        assignDueTime: submission.toString().split(\" \")[4],\r\n        assignmentId: 0, \r\n        assignPoints: assignPoints\r\n    });\r\n\r\n    setFormData({\r\n        assignTitle: '',\r\n        assignDesc: '',\r\n        assignDueDate: '', \r\n        assignDueTime: '',\r\n        assignmentId: 0, \r\n        assignPoints: 10\r\n      });\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose}>\r\n    <form onSubmit={handleSubmit}>\r\n      <DialogTitle>{assignment ? \"Edit Assignment\" : \"Create Assignment\"}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          {assignment ? \r\n            \"Editing assignment's information won't affect the submitted files. Click save to save changes.\" : \r\n            \"To create an assignment, please provide the information about the assignment.\"\r\n          }\r\n        </DialogContentText>\r\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <TextField\r\n                autoFocus\r\n                name=\"assignTitle\"\r\n                label=\"Assignment Title\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                value={assignTitle}\r\n                onChange={handleTextChange}\r\n                required\r\n                inputProps={{ maxLength: 50 }}\r\n                sx={{ mt: 2 }}\r\n            />\r\n            <Stack direction=\"row\" spacing={2} mt={2}>\r\n                <DateTimePicker\r\n                    label=\"Submission\"\r\n                    value={submission}\r\n                    onChange={handleDateChange}\r\n                    renderInput={(params) => <TextField fullWidth {...params} />}\r\n                />\r\n                <TextField\r\n                    autoFocus\r\n                    name=\"assignPoints\"\r\n                    label=\"Points\"\r\n                    variant=\"outlined\"\r\n                    type=\"number\"\r\n                    value={assignPoints}\r\n                    onChange={handleTextChange}\r\n                    required\r\n                    inputProps={{ min: 1, max: 100 }}\r\n                    fullWidth\r\n                    sx={{ mt: 2 }}\r\n                />\r\n            </Stack>\r\n            <TextField\r\n                multiline\r\n                rows={3}\r\n                name=\"assignDesc\"\r\n                label=\"Assignment Instructions\"\r\n                type=\"text\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                value={assignDesc}\r\n                onChange={handleTextChange}\r\n                required\r\n                inputProps={{ maxLength: 250 }}\r\n                sx={{ mt: 2 }}\r\n            />\r\n        </LocalizationProvider>\r\n        </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose}>Cancel</Button>\r\n        <Button type=\"submit\">Save</Button>\r\n      </DialogActions>\r\n    </form>\r\n  </Dialog>\r\n  )\r\n}\r\n\r\nexport default CreateAssignment"],"names":["open","assignment","handleClose","saveAssignment","useState","assignTitle","assignDesc","assignDueDate","assignDueTime","assignmentId","assignPoints","formData","setFormData","Date","submission","setSubmission","useEffect","state","handleTextChange","event","target","name","value","onClose","onSubmit","preventDefault","toISOString","split","toString","dateAdapter","AdapterDateFns","autoFocus","label","fullWidth","variant","onChange","required","inputProps","maxLength","sx","mt","direction","spacing","newValue","renderInput","params","type","min","max","multiline","rows","onClick"],"sourceRoot":""}